name: 'Terraform'

on:
  push:
    branches: [ "master" ]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      env:
        TF_VAR_table_name: ${{ secrets.table_name }}
        TF_VAR_hash_key: ${{ secrets.hash_key }}
        TF_VAR_function_name: ${{ secrets.function_name }}
        TF_VAR_api_name: ${{ secrets.api_name }}
        TF_VAR_stage_name: ${{ secrets.stage_name }}
        TF_VAR_myregion: ${{ secrets.myregion }}
        TF_VAR_accountId: ${{ secrets.accountId }}
      run: terraform plan -no-color

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -no-color
